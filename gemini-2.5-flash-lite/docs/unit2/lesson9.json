[
  {
    "title": "Abstract: Dice Detective Lesson",
    "body": "Unit 2 Lesson 9, 'Dice Detective,' focuses on teaching students how to use simulations to identify an unfair die. The lesson begins by reviewing the concept that short-term outcomes of chance experiments can vary from ideal expectations, even with a fair die where all outcomes are equally likely. Students will engage in hands-on activities, including actual dice rolls tallied on poster paper, and learn to use RStudio for simulations. Key R functions introduced are `roll_die()`, `tally()`, and `histogram()`. The lesson emphasizes the importance of sample size in distinguishing fair from unfair dice, showing that larger sample sizes (e.g., 2000 rolls) are necessary to detect subtle differences. Students will compare simulated results from a fair die (Die A) and an unfair die (Die B), which favors the number 3, and discuss why large sample sizes are crucial for detecting small probability differences. The lesson concludes with students creating their own simulations in RStudio and a homework assignment involving a four-sided die."
  },
  {
    "title": "Unit 2 Lesson 9: Introduction and Objectives",
    "body": "The objective of Unit 2 Lesson 9, 'Dice Detective,' is for students to learn how to utilize simulations as a method for detecting whether a die is unfair. Materials required for this lesson include poster paper with columns labeled 1 through 6, two dice (number cubes), and a projector for demonstrating RStudio functions. The lesson starts by asking students to reflect on tweets from previous homework and how they relate to the definition of probability as a measure of long-run occurrence. It reinforces the concept that simulations allow us to estimate probabilities of real-life events using calculated sample proportions. The core idea is that in the short term, actual outcomes of chance experiments can differ from ideal expectations, even with fair dice where each outcome is equally likely. This lesson builds on prior knowledge of simulations and introduces the application of probability to identify unfair events, specifically using dice."
  },
  {
    "title": "Understanding Dice and Probability",
    "body": "In Unit 2 Lesson 9, students are introduced to the concept of a die, also known as a number cube. A standard die is a 6-sided cube with faces numbered 1 through 6. A fair die is defined by the principle that each of its faces has an equal probability of appearing when rolled. This means the theoretical probability of rolling any specific number on a fair die is 1/6. The lesson initiates a discussion about student expectations for rolling a specific number, like a 1, emphasizing that with 6 equally likely outcomes, the probability is 1/6. A poster paper with columns labeled 1 to 6 is used to visually represent these outcomes and tally actual rolls. The concept of 'ideal' short-term outcomes versus long-run probabilities is highlighted, noting that actual results may vary from expectations due to chance, especially with small sample sizes."
  },
  {
    "title": "Hands-on Dice Rolling Activity",
    "body": "Unit 2 Lesson 9 involves a practical activity where students perform actual dice rolls. Two students are selected to roll dice, with each student rolling their die 6 times, resulting in a total of 12 rolls for the class sample. The outcomes are tallied on a poster board with columns for each number (1-6). Before the rolls, students discuss their expectations: how often they anticipate rolling a specific number (e.g., a 3) out of 6 rolls (expecting about one occurrence), and whether this expectation holds for the second student. The concept of independent events is explained: each student's rolls are independent of the other student's, and each individual roll is independent of previous rolls for the same student. The class then predicts the expected number of tally marks per column for 12 total rolls (expecting 2 per column). After the rolls, students observe the results, discuss discrepancies from expectations, and consider whether these variations indicate unfair dice. They are prompted to think about how one might intentionally create an unfair die, such as weighting it with tape or chipping an edge."
  },
  {
    "title": "Simulating Dice Rolls with RStudio",
    "body": "Unit 2 Lesson 9 introduces the use of RStudio for simulating dice rolls, extending the simulation concepts from previous lessons. The `roll_die()` function is presented as the tool for this simulation. Unlike `rflip()`, `roll_die()` requires specifying which die to use ('A' or 'B') and the number of times to roll. Initially, students are shown how to roll die A once (`roll_die(“A”, times = 1)`) and then 12 times (`roll_die(“A”, times = 12)`). The results are compared to the previous physical dice rolls. The lesson highlights the challenge of analyzing raw output for a large number of rolls and introduces the `tally()` function as a way to count the occurrences of each die value. The `tally()` function can also be used with the argument `format = “proportion”` to calculate the proportion of each outcome."
  },
  {
    "title": "Analyzing Simulated Dice Data with RStudio",
    "body": "In Unit 2 Lesson 9, after simulating dice rolls in RStudio using `roll_die()`, students learn to analyze the data. To simplify data handling, simulations are assigned names (e.g., `sample1 <- roll_die(“A”, times = 100)`). The `tally()` function is then used to count occurrences and calculate proportions for `sample1`. The concept of a fair die is revisited: if Die A is fair, the proportions for each number (1-6) should be similar to each other and approximate the theoretical probability of 1/6. Students are then introduced to the `histogram()` function to visualize the simulated data. They are instructed to include the argument `nint = 6` to ensure the histogram displays six bars, one for each possible die face. Before running the histogram, students predict what it would look like if the die were fair (expecting bars of roughly equal height)."
  },
  {
    "title": "Introducing RScripts and Code Comments",
    "body": "Unit 2 Lesson 9 introduces students to RScripts as a tool for organizing and executing multiple lines of R code. The teacher demonstrates how to open an RScript and type functions, such as `roll_die(“A”, times = 1)`, which can then be run by pasting the function onto the console. Students are encouraged to save their RScripts. The lesson also explains how to add notes to RScripts using a hashtag (#) at the beginning of the line, referred to as 'code comments.' These comments are ignored by R but are useful for the user to understand the code. Examples include comments for saving an RScript and for explaining individual functions. Students can run code line by line by placing the cursor on the desired line and clicking 'Run,' or run multiple lines by highlighting them first. This feature helps in testing code, writing explanations, and easily executing commands."
  },
  {
    "title": "Detecting the Unfair Die (Die B)",
    "body": "Building on previous steps in Unit 2 Lesson 9, students are tasked with using RStudio to simulate rolls for Die B and compare its results to Die A. They begin by rolling Die B 100 times and analyzing the `tally()` output and `histogram()`. Initially, with small sample sizes, they may not yet be able to definitively identify the unfair die, as the results might appear similar to Die A. The lesson guides students to explore by increasing the number of rolls, emphasizing that large sample sizes are crucial for detecting differences. The maximum value for `times` in `roll_die()` is 2000. Simulations can be combined using the concatenate function `c()`. The key finding is that Die B is unfair and favors the number 3, while Die A is fair. This identification becomes clear when using very large sample sizes, such as `times = 2000`."
  },
  {
    "title": "The Importance of Sample Size in Simulations",
    "body": "A crucial takeaway from Unit 2 Lesson 9 is the impact of sample size on detecting unfairness in dice. Students discover that with small sample sizes (e.g., 100 rolls), the results from a fair die (Die A) and an unfair die (Die B) can appear quite similar, making it difficult to determine which is unfair. However, as the number of simulations increases significantly (e.g., to 2000 rolls), the bias of the unfair die becomes apparent. The lesson prompts a class discussion to verify that students agree Die B is unfair because it favors the number 3, while Die A is fair. The discussion then focuses on *why* sample size matters: the difference in probabilities between outcomes on an unfair die can be very small. Detecting these small differences requires a large number of trials (a large sample size) to observe a statistically significant deviation from expected outcomes."
  },
  {
    "title": "Vocabulary: Probability, Simulation, Fair Die, Unfair Die, Independent Events, RScript, Code Comments, Histogram, Tally",
    "body": "This chunk defines key terms introduced in Unit 2 Lesson 9, 'Dice Detective.' **Probability** measures how often an event occurs in the long run. A **Simulation** is an imitation of a real-world process, often used to estimate probabilities. A **Fair Die** is a six-sided cube where each face has an equally likely chance of landing face up (probability of 1/6 for each number). An **Unfair Die** is one that favors certain outcomes over others, meaning the probabilities are not equal. **Independent Events** are occurrences that do not affect each other; for dice, each roll is independent of previous rolls, and one person's rolls are independent of another's. An **RScript** is a file used in RStudio to store and run multiple lines of code. **Code Comments** are notes within an RScript, usually starting with '#', that are ignored by R but help programmers understand the code. A **Histogram** is a graphical representation of the distribution of numerical data, showing the frequency of values within specific bins (in this case, 6 bins for the die faces). The **tally()** function in R is used to count the frequency of each unique value in a dataset."
  },
  {
    "title": "Homework: Four-Sided Die Histogram",
    "body": "The homework assignment for Unit 2 Lesson 9, 'Dice Detective,' requires students to consider a four-sided die. They are asked to imagine rolling this die 20 times and to sketch three different histograms representing potential outcomes. The first histogram should depict the ideal, expected outcome if the die were fair. The second should illustrate a 'realistic' outcome, acknowledging that random variation can occur even with a fair die. The third histogram should represent an outcome they might observe if the four-sided die were unfair and biased towards producing more rolls of the number 4. This assignment reinforces the concepts of theoretical probability, random variation, and the visual detection of bias in dice rolls through histograms."
  }
]