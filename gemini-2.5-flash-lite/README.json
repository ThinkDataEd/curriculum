[
  {
    "title": "Abstract of the Introduction to Data Science Curriculum v_5.0",
    "body": "This document outlines the structure and management of the Introduction to Data Science Curriculum v_5.0. It details the MkDocs commands for building, serving, and deploying the documentation site, including alternative Python 3 execution. The project layout is described, highlighting key directories like 'docs/' for source files and 'site/' for generated output. Instructions are provided for managers to set up their development environment using Visual Studio Code and GitHub Desktop, covering repository and branch management, fetching, pulling, editing files, and deploying changes via MkDocs commands or GitHub Desktop. A note points to the curriculum's GitHub repository for further information."
  },
  {
    "title": "MkDocs Commands Overview",
    "body": "MkDocs is a static site generator that simplifies the process of building a project website. The following commands are essential for managing the documentation: `mkdocs build` generates the static site files, typically in the `site/` directory. `mkdocs serve` starts a local development server with live reloading, allowing for instant preview of changes. `mkdocs gh-deploy` automates the deployment of the documentation to a hosting service like GitHub Pages. `mkdocs -h` displays the help message, listing all available commands and options. These commands can also be executed using `python3 -m mkdocs` followed by the respective command."
  },
  {
    "title": "MkDocs Build Command",
    "body": "The `mkdocs build` command is used to compile the source Markdown files and other assets into a static website. This command reads the configuration from `mkdocs.yml`, processes the files located in the `docs/` directory, and generates the output in the `site/` directory. This output is ready to be deployed to a web server or a static hosting platform. The alternative command `python3 -m mkdocs build` achieves the same result."
  },
  {
    "title": "MkDocs Serve Command",
    "body": "The `mkdocs serve` command starts a local web server that monitors the source files for changes. When a change is detected in the Markdown files or the configuration, the site is automatically rebuilt and the browser is refreshed, providing a live preview of the documentation. This is invaluable for iterative development and content creation. The server typically runs on `http://127.0.0.1:8000/`. The alternative command `python3 -m mkdocs serve` executes the same functionality."
  },
  {
    "title": "MkDocs GH-Deploy Command",
    "body": "The `mkdocs gh-deploy` command is a convenience function for deploying the built documentation to GitHub Pages. It typically performs a `mkdocs build` first, then commits and pushes the contents of the `site/` directory to a specified branch (often `gh-pages`) in the repository. This command simplifies the deployment workflow for projects hosted on GitHub. The alternative command `python3 -m mkdocs gh-deploy` performs the same deployment action."
  },
  {
    "title": "MkDocs Help Command",
    "body": "The `mkdocs -h` command, or its alternative `python3 -m mkdocs -h`, is used to display a help message. This message provides a summary of all available MkDocs commands, their syntax, and a brief description of their purpose. It's a useful command for users who need a quick reference to the MkDocs CLI functionalities or are exploring the tool for the first time."
  },
  {
    "title": "MkDocs Project Layout",
    "body": "The MkDocs project follows a standard directory structure to organize its source files and configuration. The root of the project contains the main configuration file, `mkdocs.yml`. The `docs/` directory is where all the source Markdown files, images, and other assets for the documentation reside. Within `docs/`, there might be subdirectories, such as `IDS_Curriculum_v_5.0/` which specifically holds PDF files for download and preview. The `site/` directory is generated by MkDocs and contains the final static website files ready for deployment."
  },
  {
    "title": "MkDocs Configuration File",
    "body": "The `mkdocs.yml` file is the main configuration file for an MkDocs project. It dictates the structure, theming, plugins, and other settings of the documentation site. This file defines the navigation, site name, and which Markdown files are included in the build process. It's a YAML file and needs to be carefully edited to customize the MkDocs site according to project requirements."
  },
  {
    "title": "MkDocs Source Directory",
    "body": "The `docs/` directory is the primary location for all source content of the MkDocs documentation. It should contain all the Markdown files (`.md`) that form the pages of the website, as well as any associated assets like images or other media files. Subdirectories can be used to organize content logically. A specific subdirectory, `IDS_Curriculum_v_5.0/`, is noted for containing PDF files intended for download and preview, indicating a potential structure for supplementary learning materials."
  },
  {
    "title": "MkDocs Generated Site Directory",
    "body": "The `site/` directory is where MkDocs places the generated static website files after running the `mkdocs build` command. This directory contains the complete HTML, CSS, JavaScript, and image files that constitute the final website. The contents of the `site/` directory are what are deployed to a web server or hosting service. It is typically excluded from version control."
  },
  {
    "title": "Manager Steps: Initial Setup",
    "body": "To manage the Introduction to Data Science Curriculum v_5.0 documentation, managers need to set up their development environment. This involves downloading and installing Visual Studio Code from its official website and installing GitHub Desktop. After installation, GitHub Desktop should be configured to point to the correct repository (IDSUCLA/curriculum or curriculum) and the `master` branch. The 'Refresh Icon/Fetch Origin' should be clicked, followed by 'Pull Origin' if an update is available, to synchronize the local repository with the remote one."
  },
  {
    "title": "Manager Steps: Using Visual Studio Code",
    "body": "Once Visual Studio Code is installed and configured with GitHub Desktop, managers can begin working on the documentation. The project should be opened in VS Code by navigating to `File -> Open -> Documents/Github/Curriculum`. A new terminal should be opened within VS Code (`Terminal -> New terminal`). Inside this terminal, `git pull` can be executed to fetch and merge any changes from the remote repository, serving as an alternative to using GitHub Desktop for synchronization. After making file edits, `mkdocs serve` can be run in the terminal to preview changes locally."
  },
  {
    "title": "Manager Steps: Publishing Changes",
    "body": "After making edits and previewing them using `mkdocs serve`, changes need to be published. To publish the website, `mkdocs gh-deploy` should be executed in the VS Code terminal. This command builds the site and deploys it to the hosting platform. To publish the source code changes (Markdown files, configuration, etc.) back to the GitHub repository, `git push` should be run in the terminal. Alternatively, after committing changes in VS Code, these can be pushed to the repository using GitHub Desktop via its 'Commit->Push' functionality."
  },
  {
    "title": "Source Code Repository Information",
    "body": "The curriculum's source code and documentation are hosted on GitHub. The primary repository for the Introduction to Data Science Curriculum v_5.0 is located at `https://github.com/IDSUCLA/curriculum`. This repository contains all the necessary files, including Markdown source files, configuration files for MkDocs, and potentially other assets. Developers and managers can find additional notes, updates, and collaborate on the project through this GitHub repository."
  }
]