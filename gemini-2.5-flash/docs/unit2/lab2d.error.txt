--- ERROR FOR FILE: .\docs\unit2\lab2d.md ---

[
  {
    "title": "Abstract: Extending Simulations and Understanding Sampling in Unit 2 Lab 2D",
    "body": "Unit 2 Lab 2D, titled 'Queue It Up!', extends the foundational concepts of computer simulations for estimating simple probabilities, as introduced in previous labs. This lab delves into more complex probability scenarios, focusing on the critical distinction between sampling *with replacement* and *without replacement*. Learners will simulate scenarios, such as drawing songs from a playlist, to understand how these sampling methods impact outcomes and probability estimates. Key activities include creating simulated playlists, performing multiple draws using the `sample` and `do` functions, and applying techniques like `mutate` with `rowSums` or a two-step filtering process to estimate probabilities from the simulation results. The lab also emphasizes the importance of reproducibility with `set.seed` and visualizing distributions using histograms, culminating in an independent exercise comparing the effects of sampling with and without replacement on complex event probabilities."
  },
  {
    "title": "Unit 2 Lab 2D: Introduction to Complex Simulations and Sampling Concepts",
    "body": "Unit 2 Lab 2D, 'Queue It Up!', builds upon previous lab work by expanding computer simulation methods to address more intricate situations. In earlier labs, simple probabilities, such as drawing a song genre from a playlist, were estimated. This `Unit 2 Lab 2D` aims to teach how to estimate probabilities for complex scenarios. A crucial aspect introduced in this lab is the role of sampling *with replacement* versus *without replacement*, which significantly impacts the simulation outcomes. Participants will follow along with slides, completing interactive questions on the computer (indicated in **blue**) and reflective questions in their journal (indicated in **red**). The lab provides hands-on experience in generating simulations and analyzing their results to derive meaningful probability estimates."
  },
  {
    "title": "Simulating a Song Playlist and Initial Probability Estimation in Unit 2 Lab 2D",
    "body": "In `Unit 2 Lab 2D`, the first step involves setting up a simulated playlist to serve as the basis for probability exercises. Participants are instructed to write and run code (Question 1, **red**) to create a playlist named `songs`, containing a specific distribution: 30 'rap' songs, 23 'country' songs, and 47 'rock' songs. Once the playlist is established, the lab moves to estimating a simple probability. Participants will simulate choosing a single song 50 times (Question 2, **red**) and use these simulated draws to estimate the probability of selecting a 'rap' song. This estimate is then compared to the 'true' theoretical probability of 0.30 (Question 3, **red**), providing an initial understanding of simulation accuracy and variability. This initial simulation is performed *with replacement*, meaning each song drawn is conceptually returned to the playlist before the next draw."
  },
  {
    "title": "Understanding Sampling With and Without Replacement in Unit 2 Lab 2D",
    "body": "A core concept introduced in `Unit 2 Lab 2D` is the distinction between sampling *with replacement* and *without replacement*. When sampling *with replacement*, each selection is made from the original, unchanged set. For example, if you draw a song from a playlist, you record its data and then effectively put it back, ensuring the playlist remains identical for subsequent draws. This is the default behavior in many simulation functions. Conversely, sampling *without replacement* means that once an item is selected, it is removed from the set, altering the composition for subsequent draws. This is achieved by setting the `replace` option in functions like `sample` to `FALSE`. Understanding this difference is crucial for accurately modeling real-world scenarios, as it directly impacts the probabilities of future selections."
  },
  {
    "title": "Practical Application of Sampling Without Replacement in Unit 2 Lab 2D",
    "body": "To solidify the understanding of sampling *without replacement*, `Unit 2 Lab 2D` includes a practical exercise. Participants are directed to write and run code (Question 4, **red**) to take a sample of `size` 100 from the `songs` playlist *without replacement*, assigning this sample the name `without`. Following this, they run `tally(without)` (Question 5, **red**) to describe the output, observing how the counts of genres may reflect the depletion of songs. The exercise further prompts consideration of whether a similar outcome occurs when sampling *with replacement* (Question 6, **red**). A key observation is that `tally` can be used directly on a vector like `without`, unlike when it's a variable within a data frame, where a tilde `~` would be needed. The lab then challenges participants to consider an edge case: 'What happens if `size = 101` and `replace = FALSE`?' (Question 7, **red**), highlighting the limitations of sampling without replacement when the sample size exceeds the population."
  },
  {
    "title": "Choosing the Right Sampling Method: Scenarios in Unit 2 Lab 2D",
    "body": "`Unit 2 Lab 2D` provides two distinct scenarios to help participants determine when to apply sampling *with* or *without replacement*. The first scenario involves estimating the probability of getting a *Head* from a potentially unfair coin, while the second concerns a child grabbing three candies from a jar containing different types (10 *strawberry*, 50 *chocolate*, 25 *watermelon*), with interest in the probability of all three being chocolate. Participants must decide for each scenario whether to sample *with replacement* or *without replacement* and justify their choice (Question 8, **red**). This exercise reinforces the conceptual understanding of how the population changes or remains constant after each draw. Additionally, they are asked to write the specific line of code using `sample` for the candy jar scenario, assuming the simulated jar is named `candies` (Question 9, **red**), demonstrating practical application of the `replace` option."
  },
  {
    "title": "Simulating Realistic Playlist Draws Without Replacement in Unit 2 Lab 2D",
    "body": "In `Unit 2 Lab 2D`, the lab progresses to simulate a more realistic scenario for song playlists, where songs are typically chosen *without replacement* to avoid immediate repetition. The objective is to estimate the probability of selecting two 'rap' songs consecutively when drawing without replacement. To achieve this, participants use the `do` function to perform 10 simulated `sample`s, each of `size` 2, and explicitly set `replace = FALSE`. These simulations are assigned the name `draws`, and participants are instructed to `View` the resulting file to inspect the outcomes. To ensure reproducibility of results, `set.seed(1)` is used before running the simulation (Question 10, **red**). After viewing, participants are asked to identify the variable names, describe the outcome of the first simulation, and determine if any of the 10 simulations resulted in two 'rap' songs (Question 11, **red**). This exercise provides a concrete example of simulating complex events with specific sampling rules."
  },
  {
    "title": "Estimating Probabilities from Simulations: General Principles in Unit 2 Lab 2D",
    "body": "A fundamental aspect of `Unit 2 Lab 2D` is learning how to estimate probabilities directly from simulation results. The core principle involves calculating the proportion of times the event of interest occurs within the total number of simulations performed. This is achieved by counting the number of simulations where the desired event happened and then dividing this count by the total number of attempts (or simulations). This method provides an empirical estimate of the probability, which converges towards the true theoretical probability as the number of simulations increases. The lab highlights that the next sections will demonstrate two specific computational methods to achieve this, moving from raw simulation data to a meaningful probability estimate. This process is essential for analyzing complex events where theoretical probability calculations might be too intricate."
  },
  {
    "title": "Method 1: Counting Similar Outcomes using `mutate` and `rowSums` in Unit 2 Lab 2D",
    "body": "`Unit 2 Lab 2D` introduces the first method for estimating the probability of drawing two songs of the *same* genre from simulation results. This technique leverages the `mutate` function in combination with `rowSums` to efficiently count specific outcomes. For example, to count the number of 'rap' songs in each of the simulated draws, the code `mutate(draws, nrap = rowSums(draws == "rap"))` is provided. Participants are tasked with breaking down this code (Question 12, **red**), running each part individually, such as `draws == "rap"` and `rowSums(draws == "rap")`, and describing the output at each stage. This step-by-step exploration helps in understanding how logical comparisons (`draws == \"rap\"`) create boolean matrices that `rowSums` can then aggregate into counts per simulation. Assigning a name to the mutated dataset (indicated in **blue**) is crucial for further analysis."
  },
  {
    "title": "Method 2: Estimating Probabilities by Subsetting and Counting Rows in Unit 2 Lab 2D",
    "body": "Another powerful two-step procedure for estimating the probability of complex events from simulations is presented in `Unit 2 Lab 2D`. This method involves: 1) Subsetting or filtering the rows of the simulation results that precisely match the desired outcomes, and 2) Counting the number of rows in this newly created subset and dividing by the total number of simulations. The result is an estimate of the probability that a specific combination of events occurred. The lab illustrates this with an example (Question 13, **red**), asking participants to fill in blanks to: 1. Create a subset, `draws_sub`, where both draws were 'rap' songs (e.g., `filter(draws, ___ == "rap", ___ == "rap")`), 2. Count the number of rows in this subset (`nrow(___)`), and 3. Divide this count by the total number of repeated simulations (`/ ___`). This method directly isolates the successful event occurrences from the complete set of simulations, providing a clear path to probability estimation."
  },
  {
    "title": "Performing Extended Simulations and Calculating Specific Probabilities in Unit 2 Lab 2D",
    "body": "In `Unit 2 Lab 2D`, participants are guided to perform more extensive simulations to gain robust probability estimates. They are instructed to write and run code (Question 14, **red**) to conduct 500 simulations of sampling 2 songs from the original playlist of 30 'rap', 23 'country', and 47 'rock' songs. To ensure that their results are reproducible, using `set.seed` is recommended. Following these simulations, the task is to calculate and record the estimated probabilities for two specific situations (Question 15, **red**): 1. Drawing two 'rap' songs, and 2. Drawing a 'rap' song in the first draw and a 'country' song in the second. This exercise reinforces the methods for extracting specific event frequencies from a larger set of simulation data to derive probability estimates, moving beyond just 10 simulations to a higher number for greater accuracy."
  },
  {
    "title": "Visualizing Simulation Outcomes with Histograms in Unit 2 Lab 2D",
    "body": "`Unit 2 Lab 2D` emphasizes the importance of visualizing simulation results to better understand the distribution of outcomes. Following the extended simulations, participants are asked to create a histogram (Question 16, **red**) that displays the number of times a 'rap' song occurred in each of the 500 simulations. This visualization allows for a clear understanding of the frequency distribution. Key questions to address when interpreting the histogram include: 'How often were zero rap songs drawn?', 'A single rap song?', and 'Two rap songs?'. The histogram provides a visual summary of the variability and most common outcomes observed across numerous simulation runs, complementing the numerical probability estimates by showing the underlying distribution from which those estimates are derived. This skill is critical for data analysis in RAG applications."
  },
  {
    "title": "On Your Own: Comparing Sampling With and Without Replacement for Multiple Draws in Unit 2 Lab 2D",
    "body": "The final challenge in `Unit 2 Lab 2D` is an independent exercise, 'On your own' (Question 17, **red**), that consolidates the learning from the current and previous labs. Participants are tasked with answering a complex question by performing two separate computer simulations, each with 500 repetitions. The core question is: 'If we draw 5 songs from a playlist of 30 rap, 23 country and 47 rock songs, how does the estimated probability of all 5 songs being rap songs change if we draw the songs with or without replacement?' This requires setting up two distinct simulation scenarios, one where `replace = TRUE` and another where `replace = FALSE`, for drawing 5 songs. For each simulation, participants must also create a histogram (indicated in **blue**) showing the number of 'rap' songs that occurred across the 500 repetitions, allowing for a visual comparison of the distributions under different sampling conditions."
  },
  {
    "title": "Analyzing Distribution Changes with Replacement in Unit 2 Lab 2D's Independent Exercise",
    "body": "The 'On Your Own' section of `Unit 2 Lab 2D` culminates in a comparative analysis of the effects of sampling *with* and *without replacement* on the distribution of outcomes. After conducting two simulations, each drawing 5 songs from the playlist 500 times (one with replacement, one without), and generating histograms for each, participants must describe how the distribution of the number of 'rap' songs changes depending on the sampling method (Question 18, **red**). This involves interpreting the shapes, centers, and spreads of the two histograms. For example, sampling without replacement might lead to a more constrained distribution for 'rap' songs, especially if drawing 5 'rap' songs becomes impossible after a few 'rap' songs have already been selected. This reflective analysis reinforces a deep understanding of how the `replace` option in sampling directly influences the range of possible outcomes and their respective frequencies, providing a comprehensive understanding of probability estimation in complex scenarios."
  }
]