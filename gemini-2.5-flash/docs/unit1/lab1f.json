[
  {
    "title": "Abstract: Unit 1 Lab 1F - Data Cleaning Essentials",
    "body": "This document outlines Unit 1 Lab 1F, titled 'A Diamond in the Rough,' which focuses on essential data cleaning techniques for R users. The lab introduces the concept of 'messy' versus 'clean' data, highlighting common issues like non-descriptive variable names, typos in categorical values, incorrectly input numerical data, and miscoded variable types (e.g., numbers treated as strings). Participants will learn to identify and rectify these issues using the American Time Use (ATU) Survey dataset. Key skills covered include renaming variables for clarity using the `rename` function, converting string-coded numbers to true numeric types with `as.numeric` within `mutate`, and recoding categorical variable levels (factors) into more descriptive names using the `recode` function. The lab also emphasizes creating R scripts for reproducible data cleaning and permanently saving cleaned datasets using the `save` function. Finally, participants apply these acquired cleaning skills to another dataset, `food`, practicing `as.factor` and `recode` for categorical variables."
  },
  {
    "title": "Unit 1 Lab 1F: Introduction to Data Cleaning and Messy Data",
    "body": "Unit 1 Lab 1F, 'A Diamond in the Rough,' introduces the critical skill of data cleaning. In previous labs, data was conveniently 'clean,' meaning variables had understandable names, values were free of typos, numerical variables were correctly identified as numbers, and categorical variables consisted of clear categories. However, in real-world scenarios, data is often 'messy' and requires user intervention to clean it. This lab aims to equip users with fundamental techniques to clean 'dirty' data. Messy data can manifest in various ways, such as variables having non-descriptive names like 'Var01' or 'V2,' categorical variables containing misspelled or inconsistent categories (e.g., 'blue', 'Blue', 'blu'), and numerical variables being incorrectly entered (e.g., '6.86' instead of '68.6' for height) or incorrectly coded as strings (e.g., '64.7' instead of 64.7). The goal of this lab is to transform such raw, 'dirty' data into a 'clean' and usable format."
  },
  {
    "title": "Identifying Characteristics of Messy Data in Unit 1 Lab 1F",
    "body": "In Unit 1 Lab 1F, 'A Diamond in the Rough,' the concept of messy data is explored in detail, outlining several common characteristics that require cleaning. Messy data often includes variables with non-descriptive names, such as generic labels like 'Var01,' 'V2,' or single letters like 'a,' making it difficult to understand their meaning. Categorical variables frequently suffer from misspelled or inconsistent categories, where 'blue,' 'Blue,' and 'blu' might all refer to the same concept, preventing accurate analysis. Numerical variables can be input incorrectly, leading to nonsensical values; for instance, a person's height in inches might be entered as '6.86' or '676' instead of '68.6.' Additionally, variables can be incorrectly coded, where numerical data might be treated as categorical variables (e.g., '64.7' as a string) or vice-versa. To demonstrate these issues, Unit 1 Lab 1F utilizes the American Time Use Survey (ATU) data, providing a practical example of 'dirty' data that needs extensive cleaning before it can be effectively analyzed."
  },
  {
    "title": "Introduction to the American Time Use Survey (ATU) and Initial Data Loading in Unit 1 Lab 1F",
    "body": "Unit 1 Lab 1F introduces the American Time Use (ATU) Survey as the primary dataset for learning data cleaning. The ATU survey is a significant data collection effort conducted by the U.S. government, specifically the Bureau of Labor Statistics. Its main objective is to survey thousands of individuals to gather precise information about the activities they perform throughout a single day. By aggregating this data, researchers can gain insights into how the typical person in the U.S. spends their time across various activities. To begin the cleaning process in Unit 1 Lab 1F, participants are instructed to load the 'dirty' version of this dataset into their R console. This is achieved using the commands `data(atu_dirty)` to load the dataset and `View(atu_dirty)` to inspect its contents. This initial viewing step is crucial for participants to identify, firsthand, the parts of the ATU data that are messy and will require cleaning, setting the stage for the subsequent cleaning operations."
  },
  {
    "title": "ATU Survey Variable Descriptions and Renaming Techniques in Unit 1 Lab 1F",
    "body": "In Unit 1 Lab 1F, after loading the 'dirty' American Time Use (ATU) Survey data, a critical step in data cleaning involves understanding and then renaming variables for clarity. The ATU dataset, `atu_dirty`, contains several variables with non-descriptive names: `caseid` (anonymous ID), `V1` (age), `V2` (sex), `V3` (employment status), `V4` (physical difficulty), `V5` (sleep duration in minutes), `V6` (homework duration in minutes), and `V7` (socializing duration in minutes). To improve readability and ease of analysis, these generic names need to be replaced with more descriptive ones. Unit 1 Lab 1F teaches how to fix variable names using the `rename` function. An example provided is `atu_cleaner <- rename(atu_dirty, age = V1, sex = V2)`, which renames 'V1' to 'age' and 'V2' to 'sex'. Participants are then tasked with applying this `rename` function to the remaining variables in `atu_dirty`, choosing short, space-free, and descriptive new names for each. This renaming process is a fundamental step in making data more understandable and manageable."
  },
  {
    "title": "Understanding Strings and Converting Numerical Variables in Unit 1 Lab 1F",
    "body": "Unit 1 Lab 1F, 'A Diamond in the Rough,' delves into data types, specifically 'strings' and the process of converting them to numerical values when appropriate. In programming, a 'string' is essentially a sequence of characters, similar to a word, always enclosed in quotes (e.g., \"string\", \"A1B2c3\", \"0015\"). Sometimes, R might incorrectly interpret values that look like numbers as strings. This can happen intentionally (e.g., coding Yes/No as '1'/'0' strings) or unintentionally, as when a numerical variable like 'number of siblings' is stored as a string. To identify such miscodings, users are encouraged to examine the `str`ucture of their data, which reveals the data type of each variable. Once identified, Unit 1 Lab 1F teaches how to correct this using the `as.numeric` function. This function takes a string that represents a number (e.g., \"3.14\") and converts it into an actual numeric value (e.g., 3.14). Participants are prompted to identify variables from the ATU survey that should be numeric but are currently coded as strings or characters, preparing them for the conversion step."
  },
  {
    "title": "Applying `mutate` and `as.numeric` for Data Type Correction in Unit 1 Lab 1F",
    "body": "Building on the understanding of strings and numerical types, Unit 1 Lab 1F guides participants through the practical application of converting string-coded numerical variables into actual numeric variables. This crucial data cleaning step is performed using the `mutate` function in conjunction with `as.numeric`. The `mutate` function allows for modifying existing variables or creating new ones within a dataset. For instance, to convert the `age` variable (which might be incorrectly stored as a string) into a numeric type, the code would be structured as `atu_cleaner <- mutate(atu_cleaner, age = as.numeric(age))`. Unit 1 Lab 1F provides an example demonstrating how `as.numeric(\"3.14\")` successfully converts the string \"3.14\" into the number 3.14. Participants are instructed to select one of the variables they previously identified as being improperly coded as a string and apply this `mutate` and `as.numeric` combination. Following this, they are tasked with applying similar code to correctly convert all other identified 'numeric' variables in their `atu_cleaner` dataset, ensuring that all quantitative data is ready for numerical analysis."
  },
  {
    "title": "Deciphering and Recoding Categorical Variables (Factors) in Unit 1 Lab 1F",
    "body": "Unit 1 Lab 1F extends data cleaning to categorical variables, often coded numerically but benefiting from descriptive labels. For example, in the American Time Use (ATU) Survey, the `sex` variable might be coded as '01' for 'Male' and '02' for 'Female'. While numerically coded, it's often more intuitive and easier to interpret when these codes are represented by their descriptive categories. R specifically refers to categorical variables as 'factors,' and the individual categories within them are called 'levels.' To inspect these levels and their counts in the `atu_cleaner` dataset, Unit 1 Lab 1F suggests using the command `tally(~sex, data = atu_cleaner)`. Participants are then asked to use similar code to identify and record the levels for other factor variables in their data. This understanding of factors and levels is foundational for the next cleaning step: recoding these numerical representations into meaningful textual categories, thereby enhancing the clarity and interpretability of the dataset."
  },
  {
    "title": "Applying the `recode` Function for Categorical Variables in Unit 1 Lab 1F",
    "body": "To make categorical variables more interpretable, Unit 1 Lab 1F introduces the `recode` function, used to change the 'levels' of a 'factor' (R's term for a categorical variable). Taking the `sex` variable from the American Time Use (ATU) Survey as an example, if '01' represents 'Male' and '02' represents 'Female,' the `recode` function allows these numerical codes to be replaced with their descriptive labels. The command provided in Unit 1 Lab 1F is: `atu_cleaner <- mutate(atu_cleaner, sex = recode(sex, '01' = 'Male', '02' = 'Female'))`. This line of code is broken down to explain its components: it updates `atu_cleaner` by `mutate`ing the `sex` variable, where `recode` is applied to change '01' to 'Male' and '02' to 'Female'. This process significantly enhances the clarity of the data, making it much easier to understand and analyze than cryptic numerical codes. Participants are guided through this command, preparing them to apply similar recoding techniques to other categorical variables in their dataset, such as the `physical difficulty` variable."
  },
  {
    "title": "Completing Data Cleaning and Scripting for ATU Data in Unit 1 Lab 1F",
    "body": "In Unit 1 Lab 1F, 'A Diamond in the Rough,' participants complete the data cleaning process by applying all learned techniques and then formalizing their work into an R script. After practicing renaming variables, converting data types with `as.numeric`, and recoding categorical levels with `recode` for the `sex` variable, the next step is to apply the `recode` function to other factors. Specifically, participants are instructed to recode the `physical challenge` variable, where '01' signifies 'did not have a physical challenge' and '02' signifies 'did have a physical challenge.' The lab then guides users to consolidate all cleaning steps into a single R script. This script should load the `atu_dirty` dataset, perform all the cleaning operations covered in the lab, and finally, save a copy of the cleaned data. Creating an R script is crucial for reproducibility, ensuring that the entire cleaning process can be easily repeated or shared, and it is a best practice in data management."
  },
  {
    "title": "Saving Cleaned Data Permanently and Scripting Importance in Unit 1 Lab 1F",
    "body": "Unit 1 Lab 1F emphasizes the critical step of permanently saving cleaned data to avoid losing all progress. After performing numerous cleaning operations – including renaming variables, converting data types with `as.numeric`, and recoding categorical levels with `recode` – the current cleaned data resides in a temporary R object (e.g., `atu_cleaner`). To secure these changes, the lab instructs users to first create a final copy, `atu_clean <- atu_cleaner`. This ensures a distinct, clean version of the dataset. The most important step for permanent storage is then to save this data frame as an R data file, or `.Rda` file, using the command `save(atu_clean, file = \"atu_clean.Rda\")`. This `.Rda` file can be found in the 'Files' pane and ensures that if the R Environment is cleared, the cleaned data can be easily reloaded by clicking the file. The comprehensive R script developed in Unit 1 Lab 1F, which includes loading, cleaning, and saving commands, becomes invaluable here, as it allows for quick regeneration of the `atu_clean` dataset if ever needed from the original dirty data."
  },
  {
    "title": "Flex Your Skills: Applying Cleaning Techniques to the Food Data in Unit 1 Lab 1F (Part 1)",
    "body": "After mastering data cleaning with the American Time Use (ATU) Survey, Unit 1 Lab 1F provides an opportunity to 'flex your skills' by applying these techniques to a new dataset: `food`. The first step involves importing the `food` data into the R Environment pane. To observe the initial state of a key variable, participants are instructed to run `histogram(~calories | healthy_level, data = food)`. This visual inspection helps identify cleaning needs. The lab then focuses on the `healthy_level` variable. Recognizing that it might not be properly coded as a categorical variable, Unit 1 Lab 1F guides users to convert `healthy_level` into a factor using the `as.factor()` function. After this conversion, re-running the histogram allows participants to observe the immediate improvement, as categories are now represented as distinct numbers rather than tick-marks, indicating better recognition of discrete levels. This exercise reinforces the importance of correct data typing for appropriate analysis and visualization, especially for categorical variables (factors)."
  },
  {
    "title": "Flex Your Skills: Applying Cleaning Techniques to the Food Data in Unit 1 Lab 1F (Part 2) and Saving",
    "body": "Continuing the 'flex your skills' exercise in Unit 1 Lab 1F, participants further refine the `healthy_level` variable in the `food` dataset. While converting `healthy_level` to a factor using `as.factor()` was an improvement, the categories are still represented numerically ('1', '2', etc.). To enhance interpretability, the lab instructs users to apply the `recode` function, similar to how it was used for the ATU survey's categorical variables. The specified recoding scheme for `healthy_level` is: '1' = 'Very Unhealthy', '2' = 'Unhealthy', '3' = 'Neutral', '4' = 'Healthy', and '5' = 'Very Healthy'. After running this `recode` command, participants re-run the `histogram` function to observe the final, much clearer visualization with descriptive labels. Finally, echoing the importance of permanent data storage from the ATU cleaning process, Unit 1 Lab 1F reminds users that any changes made to the `food` data (like recoding `healthy_level`) will be lost if not saved. Therefore, participants are tasked with saving their modified `food` file permanently as an R data file (`.Rda`), ensuring their cleaning efforts are preserved."
  }
]